package evr

import (
	"reflect"
	"testing"

	"github.com/gofrs/uuid/v5"
	"github.com/google/go-cmp/cmp"
	"github.com/stretchr/testify/assert"
)

func TestLobbyFindSessionRequest_UnmarshalJSON(t *testing.T) {
	testCases := []struct {
		name string
		data []byte
		want *LobbyFindSessionRequest
	}{

		{
			name: "Press `Play` on the main menu",
			data: []byte{
				0x0d, 0x91, 0x77, 0x8f, 0xd7, 0x01, 0x2f, 0xc6, 0x76, 0xcf, 0xdd, 0xcf, 0xf9, 0x9c, 0x2d, 0x04,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf4, 0x9f, 0xa8, 0xb1, 0xd0, 0xe8, 0xc8,
				0x1f, 0xac, 0x51, 0x12, 0xbc, 0x11, 0xef, 0x11, 0x93, 0x1a, 0x66, 0xd3, 0xff, 0x8a, 0x65, 0x3b,
				0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x47, 0x74, 0x2e, 0xe2, 0x4c, 0x71, 0x48,
				0x9e, 0x4b, 0x13, 0xa4, 0x7a, 0x5a, 0x6f, 0xa6, 0x7b, 0x22, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79,
				0x70, 0x65, 0x22, 0x3a, 0x33, 0x30, 0x31, 0x30, 0x36, 0x39, 0x33, 0x34, 0x36, 0x38, 0x35, 0x31,
				0x39, 0x30, 0x31, 0x33, 0x30, 0x32, 0x2c, 0x22, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x3a, 0x22,
				0x31, 0x33, 0x36, 0x39, 0x30, 0x37, 0x38, 0x34, 0x30, 0x39, 0x38, 0x37, 0x33, 0x34, 0x30, 0x32,
				0x22, 0x7d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa9, 0x53, 0x29, 0xef,
				0x14, 0x0e, 0x00,
			},
			want: &LobbyFindSessionRequest{
				VersionLock:      BuildVersions["goldmaster 631547"],
				Mode:             ModeSocialPublic,
				Level:            LevelUnspecified,
				Platform:         OVR.Symbol(),
				CrossPlayEnabled: true,
				LoginSessionID:   GUID(uuid.FromStringOrNil("1251ac1f11bc11ef931a66d3ff8a653b")),
				Channel:          GUID(uuid.Must(uuid.FromString("2e7447d8-4ce2-4871-9e4b-13a47a5a6fa6"))),
				SessionSettings: SessionSettings{
					AppID: 0,
					Mode:  ModeSocialPublic,
					Level: LevelUnspecified,
				},
				Entrants: []Entrant{
					{
						EvrID: EvrId{
							PlatformCode: OVR,
							AccountId:    12183925841897455616,
						},
						Alignment: int16(UnassignedRole),
					},
				},
			},
		},
		{
			name: "Press `Find Match` on the lobby Terminal",
			data: []byte{
				0x0d, 0x91, 0x77, 0x8f, 0xd7, 0x01, 0x2f, 0xc6, 0x76, 0xcf, 0xdd, 0xcf, 0xf9, 0x9c, 0x2d, 0x04,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf4, 0x9f, 0xa8, 0xb1, 0xd0, 0xe8, 0xc8,
				0x31, 0x4e, 0x3d, 0x55, 0xb2, 0x11, 0xef, 0x11, 0x93, 0x1a, 0x66, 0xd3, 0xff, 0x8a, 0x65, 0x3b,
				0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x47, 0x74, 0x2e, 0xe2, 0x4c, 0x71, 0x48,
				0x9e, 0x4b, 0x13, 0xa4, 0x7a, 0x5a, 0x6f, 0xa6, 0x7b, 0x22, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79,
				0x70, 0x65, 0x22, 0x3a, 0x33, 0x30, 0x31, 0x30, 0x36, 0x39, 0x33, 0x34, 0x36, 0x38, 0x35, 0x31,
				0x39, 0x30, 0x31, 0x33, 0x30, 0x32, 0x2c, 0x22, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x3a, 0x22,
				0x31, 0x33, 0x36, 0x39, 0x30, 0x37, 0x38, 0x34, 0x30, 0x39, 0x38, 0x37, 0x33, 0x34, 0x30, 0x32,
				0x22, 0x7d, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa9, 0x53, 0x29, 0xef,
				0x14, 0x0e, 0x00,
			},
			want: &LobbyFindSessionRequest{
				VersionLock:      BuildVersions["goldmaster 631547"],
				Mode:             ModeSocialPublic,
				Level:            0xffffffffffffffff,
				Platform:         OVR.Symbol(),
				CrossPlayEnabled: true,
				LoginSessionID:   GUID(uuid.FromStringOrNil("553d4e3111b211ef931a66d3ff8a653b")),
				Channel:          GUID(uuid.Must(uuid.FromString("2e7447d8-4ce2-4871-9e4b-13a47a5a6fa6"))),
				SessionSettings: SessionSettings{
					AppID: 0,
					Mode:  ModeSocialPublic,
					Level: LevelUnspecified,
				},
				Entrants: []Entrant{
					{
						EvrID: EvrId{
							PlatformCode: OVR,
							AccountId:    12183925841897455616,
						},
						Alignment: int16(UnassignedRole),
					},
				},
			},
		},
	}

	if cmp.Equal(got, want) {
		t.Errorf("\ngot  %s\nwant %s", got.String(), want.String())
	}

}

func TestLobbyFindSessionRequest_Unpack(t *testing.T) {
	data := []byte{
		0xf6, 0x40, 0xbb, 0x78, 0xa2, 0xe7, 0x8c, 0xbb,
		0xf5, 0xa3, 0x9a, 0x81, 0x01, 0x2a, 0x2c, 0x31,
		0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0d, 0x91, 0x77, 0x8f, 0xd7, 0x01, 0x2f, 0xc6,
		0x73, 0xaf, 0x1c, 0x7e, 0xde, 0xa4, 0x60, 0xcb,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xe5, 0xef, 0x94, 0xa8, 0xb1, 0xd0, 0xe8, 0xc8,
		0xf0, 0x3c, 0x22, 0x0a, 0x73, 0x8b, 0xfa, 0x3d,
		0x2e, 0xe8, 0x77, 0x74, 0xc3, 0xb2, 0x80, 0x97,
		0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7b, 0x22, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79,
		0x70, 0x65, 0x22, 0x3a, 0x2d, 0x33, 0x37, 0x39,
		0x31, 0x38, 0x34, 0x39, 0x36, 0x31, 0x30, 0x37,
		0x34, 0x30, 0x34, 0x35, 0x33, 0x35, 0x31, 0x37,
		0x2c, 0x22, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22,
		0x3a, 0x22, 0x31, 0x33, 0x36, 0x39, 0x30, 0x37,
		0x38, 0x34, 0x30, 0x39, 0x38, 0x37, 0x33, 0x34,
		0x30, 0x32, 0x22, 0x7d, 0x00, 0x07, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x87, 0x51,
		0xfd, 0x39, 0x7e, 0x1c, 0x77, 0x02, 0x00,
	}
	codec := NewCodec(nil)
	for _, tc := range testCases {

		t.Run(tc.name, func(t *testing.T) {
			// Add the header to the message
			chunks, err := codec.Wrap(SymbolOf(&LobbyFindSessionRequest{}), tc.data)
			if err != nil {
				t.Error(err)
			}

			data := codec.Packetize(chunks)

			packet, err := codec.Unmarshal(data)
			if err != nil {
				t.Error(err)
			}
			if len(packet) != 1 {
				t.Errorf("expected 1 packet, got %d", len(packet))
			}
			got, ok := packet[0].(*LobbyFindSessionRequest)
			if !ok {
				t.Error("failed to cast")
			}
			if !reflect.DeepEqual(tc.want, *got) {
				assert.EqualValuesf(t, tc.want, got, "%v failed", tc.name)
			}
		})
	}
}
