package evr

import (
	"reflect"
	"testing"

	"github.com/gofrs/uuid/v5"
	"github.com/google/go-cmp/cmp"
	"github.com/samber/lo"
)

func TestLobbyJoinSessionRequest_LobbyID(t *testing.T) {
	/* -lobbyid e7c16fb6-fbb7-11ee-b192-66d3ff8a653b */
	data := []byte{
		0xb6, 0x6f, 0xc1, 0xe7, 0xb7, 0xfb, 0xee, 0x11,
		0xb1, 0x92, 0x66, 0xd3, 0xff, 0x8a, 0x65, 0x3b,
		0x0d, 0x91, 0x77, 0x8f, 0xd7, 0x01, 0x2f, 0xc6,
		0xf8, 0xf4, 0x9f, 0xa8, 0xb1, 0xd0, 0xe8, 0xc8,
		0x01, 0x63, 0x8e, 0x64, 0xb9, 0xfb, 0xee, 0x11,
		0xad, 0x13, 0x66, 0xd3, 0xff, 0x8a, 0x65, 0x3b,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7b, 0x22, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22,
		0x3a, 0x22, 0x31, 0x33, 0x36, 0x39, 0x30, 0x37,
		0x38, 0x34, 0x30, 0x39, 0x38, 0x37, 0x33, 0x34,
		0x30, 0x32, 0x22, 0x7d, 0x00, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa9, 0x53,
		0x29, 0xef, 0x14, 0x0e, 0x00, 0xff, 0xff, 0x0a,
	}

	codec := NewCodec(nil)

	b, err := codec.Wrap(SymbolOf(&LobbyJoinSessionRequest{}), data)
	if err != nil {
		t.Error(err)
	}

	packet, err := codec.Unmarshal(b)
	if err != nil {
		t.Error(err)
	}
	got, ok := packet[0].(*LobbyJoinSessionRequest)
	if !ok {
		t.Error("failed to cast")
	}

	want := LobbyJoinSessionRequest{
		MatchID:        GUID(uuid.FromStringOrNil("e7c16fb6-fbb7-11ee-b192-66d3ff8a653b")),
		VersionLock:    -4166109104957845235,
		Platform:       ToSymbol("OVR"),
		LoginSessionID: GUID(uuid.Must(uuid.FromString("648e6301-fbb9-11ee-ad13-66d3ff8a653b"))),

		Flags: 3,
		SessionSettings: SessionSettings{
			AppID: 1369078409873402,
			Mode:  0,
			Level: 0,
		},
		Entrants: []Entrant{
			{
				EvrID:     *lo.Must(ParseEvrId("OVR_ORG-3963667097037078")),
				Alignment: -1,
			},
		},
	}

	// compare the two using a third-party library

	if !reflect.DeepEqual(*got, want) {
		if diff := cmp.Diff(*got, want); diff != "" {
			t.Errorf("mismatch (-got +want):\n%s", diff)
		}
	}
}

func TestLobbyJoinSessionRequest_Moderator(t *testing.T) {
	/* -moderator -lobbyid e7c16fb6-fbb7-11ee-b192-66d3ff8a653b */
	data := []byte{
		0xb6, 0x6f, 0xc1, 0xe7, 0xb7, 0xfb, 0xee, 0x11,
		0xb1, 0x92, 0x66, 0xd3, 0xff, 0x8a, 0x65, 0x3b,
		0x0d, 0x91, 0x77, 0x8f, 0xd7, 0x01, 0x2f, 0xc6,
		0xf8, 0xf4, 0x9f, 0xa8, 0xb1, 0xd0, 0xe8, 0xc8,
		0x21, 0x31, 0xf8, 0xe8, 0xb8, 0xfb, 0xee, 0x11,
		0x91, 0x82, 0x66, 0xd3, 0xff, 0x8a, 0x65, 0x3b,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7b, 0x22, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22,
		0x3a, 0x22, 0x31, 0x33, 0x36, 0x39, 0x30, 0x37,
		0x38, 0x34, 0x30, 0x39, 0x38, 0x37, 0x33, 0x34,
		0x30, 0x32, 0x22, 0x7d, 0x00, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa9, 0x53,
		0x29, 0xef, 0x14, 0x0e, 0x00, 0x04, 0x00, 0x0a,
	}

	codec := NewCodec(nil)

	b, err := codec.Wrap(SymbolOf(&LobbyJoinSessionRequest{}), data)
	if err != nil {
		t.Error(err)
	}

	packet, err := codec.Unmarshal(b)
	if err != nil {
		t.Error(err)
	}
	got, ok := packet[0].(*LobbyJoinSessionRequest)
	if !ok {
		t.Error("failed to cast")
	}

	want := LobbyJoinSessionRequest{
		MatchID:        GUID(uuid.FromStringOrNil("e7c16fb6-fbb7-11ee-b192-66d3ff8a653b")),
		VersionLock:    -4166109104957845235,
		Platform:       ToSymbol("OVR"),
		LoginSessionID: GUID(uuid.Must(uuid.FromString("e8f83121-fbb8-11ee-9182-66d3ff8a653b"))),

		Flags: 3,
		SessionSettings: SessionSettings{
			AppID: 1369078409873402,
			Mode:  0,
			Level: 0,
		},
		Entrants: []Entrant{
			{
				EvrID:     *lo.Must(ParseEvrId("OVR_ORG-3963667097037078")),
				Alignment: -1,
			},
		},
	}

	if !reflect.DeepEqual(*got, want) {
		if diff := cmp.Diff(*got, want); diff != "" {
			t.Errorf("mismatch (-got +want):\n%s", diff)
		}
	}

}

func TestLobbyJoinSessionRequest_ModerateUser(t *testing.T) {
	/* -moderateuser DMO-1 */
	data := []byte{
		0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0d, 0x91, 0x77, 0x8f, 0xd7, 0x01, 0x2f, 0xc6,
		0xf8, 0xf4, 0x9f, 0xa8, 0xb1, 0xd0, 0xe8, 0xc8,
		0xb6, 0x6f, 0xc1, 0xe7, 0xb7, 0xfb, 0xee, 0x11,
		0xb1, 0x92, 0x66, 0xd3, 0xff, 0x8a, 0x65, 0x3b,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x7b, 0x22, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22,
		0x3a, 0x22, 0x31, 0x33, 0x36, 0x39, 0x30, 0x37,
		0x38, 0x34, 0x30, 0x39, 0x38, 0x37, 0x33, 0x34,
		0x30, 0x32, 0x22, 0x7d, 0x00, 0x04, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa9, 0x53,
		0x29, 0xef, 0x14, 0x0e, 0x00, 0x04, 0x00, 0x0a,
	}

	codec := NewCodec(nil)

	b, err := codec.Wrap(SymbolOf(&LobbyJoinSessionRequest{}), data)
	if err != nil {
		t.Error(err)
	}

	packet, err := codec.Unmarshal(b)
	if err != nil {
		t.Error(err)
	}
	got, ok := packet[0].(*LobbyJoinSessionRequest)
	if !ok {
		t.Error("failed to cast")
	}

	want := LobbyJoinSessionRequest{
		MatchID:        GUID(uuid.Nil),
		VersionLock:    1,
		Platform:       ToSymbol("OVR"),
		LoginSessionID: GUID(uuid.Must(uuid.FromString("e7c16fb6-fbb7-11ee-b192-66d3ff8a653b"))),
		OtherEvrID:     *lo.Must(ParseEvrId("DMO-1")),
		Flags:          11,
		SessionSettings: SessionSettings{
			AppID: 1369078409873402,
			Mode:  0,
			Level: 0,
		},
		Entrants: []Entrant{
			{
				EvrID:     *lo.Must(ParseEvrId("OVR_ORG-3963667097037078")),
				Alignment: -1,
			},
		},
	}

	if !reflect.DeepEqual(*got, want) {
		if diff := cmp.Diff(*got, want); diff != "" {
			t.Errorf("mismatch (-got +want):\n%s", diff)
		}
	}
}
